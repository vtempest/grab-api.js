{"version":3,"file":"grab-api.cjs.js","sources":["../src/log.ts","../src/grab-api.ts"],"sourcesContent":["/**\n * ### Colorized Log With JSON Structure\n * ![Debug log](https://i.imgur.com/R8Qp6Vg.png)\n * Logs messages to the console with custom styling,\n * prints JSON with description of structure layout,\n * and showing debug output in development only.\n * @param {string|object} message - The message to log. If an object is provided, it will be stringified.\n * @param {string|string[]} [options.style] default='color: blue; font-size: 12pt;' - CSS style string\n * @param {boolean} [options.hideInProduction] -  default = auto-detects based on hostname.\n *  If true, uses `console.debug` (hidden in production). If false, uses `console.log`.\n *\n */\nexport function log(message = \"\", options = {} as any) {\n  let {\n    color = null,\n    style = \"color: blue; font-size: 12pt;\",\n    hideInProduction = undefined,\n    startSpinner = false,\n    stopSpinner = false,\n  } = options;\n\n  // Auto-detect if we should hide logs in production based on hostname\n  if (typeof hideInProduction === \"undefined\")\n    hideInProduction =\n      typeof window !== \"undefined\" &&\n      window?.location.hostname.includes(\"localhost\");\n\n  // For objects, print both the structure visualization and full JSON\n  if (typeof message === \"object\")\n    message =\n      printJSONStructure(message) + \"\\n\\n\" + JSON.stringify(message, null, 2);\n\n  // check if style is a one word color code or named color\n  //test if style is valid as a CSS color name\n  if (style.split(\" \").length == 1 || color) {\n    style = `color: ${style || color}; font-size: 12pt;`;\n  } else {\n    // check if style is valid as a CSS color code\n    if (style.match(/^#[0-9a-fA-F]{6}$/)) {\n      style = `color: ${style}; font-size: 12pt;`;\n    }\n  }\n\n  //  Displays an animated spinner in the terminal with the provided text.\n  var i = 0;\n  if (startSpinner)\n    (global || globalThis).interval = setInterval(() => {\n      process.stdout.write(\n        \"\\r\" + \"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\".split(\"\")[(i = ++i % 10)] + \" \" + message\n      );\n    }, 50);\n  else if (stopSpinner) {\n    clearInterval((global || globalThis).interval);\n    process.stdout.write(\"\\r\" + message + \" \".repeat(message.length) + \"\\n\");\n  } else if (typeof style === \"string\") {\n    // Use console.debug for production-hidden logs, console.log otherwise\n    if (hideInProduction) console.debug((style ? \"%c\" : \"\") + message, style);\n    else console.log((style ? \"%c\" : \"\") + message, style);\n  } else if (typeof style === \"object\") console.log(message, ...(style as any));\n  return true;\n}\n\n// ANSI escape codes for terminal colors when running in Node.js\n// Each color is mapped to a specific data type for consistent visualization\nconst colors = {\n  reset: \"\\x1b[0m\", // Reset to default color\n  yellow: \"\\x1b[33m\", // Used for strings\n  cyan: \"\\x1b[36m\", // Used for numbers\n  magenta: \"\\x1b[35m\", // Used for booleans\n  gray: \"\\x1b[90m\", // Used for null values\n  green: \"\\x1b[32m\", // Used for object braces\n  blue: \"\\x1b[34m\", // Used for array brackets\n  red: \"\\x1b[31m\", // Used for functions\n  white: \"\\x1b[37m\", // Default color\n};\n\n/**\n * Determines the appropriate color code for a given value type\n * Used for consistent color coding in the structure visualization\n */\nfunction getColorForType(value) {\n  if (typeof value === \"string\") return colors.yellow;\n  if (typeof value === \"number\") return colors.cyan;\n  if (typeof value === \"boolean\") return colors.magenta;\n  if (typeof value === \"function\") return colors.red;\n  if (value === null) return colors.gray;\n  if (Array.isArray(value)) return colors.blue;\n  if (typeof value === \"object\") return colors.green;\n  return colors.white;\n}\n\n/**\n * Returns a string representation of the value's type\n * Used to show simplified type information in the structure visualization\n */\nfunction getTypeString(value) {\n  if (typeof value === \"string\") return '\"\"';\n  if (typeof value === \"number\") return \"number\";\n  if (typeof value === \"boolean\") return \"bool\";\n  if (typeof value === \"function\") return \"function\";\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) {\n    if (value.length) return \"[\" + getTypeString(value[0]) + \"]\";\n    else return \"[]\";\n  }\n  if (typeof value === \"object\") return \"{...}\";\n  return typeof value;\n}\n\n/**\n * Creates a colored visualization of a JSON object's structure\n * Shows the shape and types of the data rather than actual values\n * Recursively processes nested objects and arrays\n */\nexport function printJSONStructure(obj, indent = 0) {\n  const pad = \"  \".repeat(indent);\n\n  // Handle primitive values and null\n  if (typeof obj !== \"object\" || obj === null) {\n    const color = getColorForType(obj);\n    return color + getTypeString(obj) + colors.reset;\n  }\n\n  // Handle arrays with special bracket formatting\n  if (Array.isArray(obj)) {\n    let result = colors.blue + \"[\" + colors.reset;\n    if (obj.length) result += \"\\n\";\n    obj.forEach((item, idx) => {\n      result += pad + \"  \" + printJSONStructure(item, indent + 1);\n      if (idx < obj.length - 1) result += \",\";\n      result += \"\\n\";\n    });\n    result += pad + colors.blue + \"]\" + colors.reset;\n    return result;\n  }\n\n  // Handle objects with special brace and property formatting\n  let result = colors.green + \"{\" + colors.reset;\n  const keys = Object.keys(obj);\n  if (keys.length) result += \"\\n\";\n  keys.forEach((key, index) => {\n    const value = obj[key];\n    const color = getColorForType(value);\n    result += pad + \"  \";\n\n    // Handle nested objects recursively\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      result +=\n        color +\n        key +\n        colors.reset +\n        \": \" +\n        printJSONStructure(value, indent + 1);\n    }\n    // Handle nested arrays recursively\n    else if (Array.isArray(value)) {\n      result +=\n        color +\n        key +\n        colors.reset +\n        \": \" +\n        printJSONStructure(value, indent + 1);\n    }\n    // Handle primitive values\n    else {\n      result += color + key + \": \" + getTypeString(value) + colors.reset;\n    }\n    if (index < keys.length - 1) result += \",\";\n    result += \"\\n\";\n  });\n  result += pad + colors.green + \"}\" + colors.reset;\n\n  // Only log at top level of recursion\n  if (indent === 0) {\n    // console.log(result);\n  }\n  return result;\n}\n\n/**\n * Shows message in a modal overlay with scrollable message stack\n * and is easier to dismiss unlike alert() which blocks window.\n * Creates a semi-transparent overlay with a white box containing the message.\n * @param {string} msg - The message to display\n */\nexport function showAlert(msg) {\n  if (typeof document === \"undefined\") return;\n  let o = document.getElementById(\"alert-overlay\"),\n    list;\n\n  // Create overlay and alert box if they don't exist\n  if (!o) {\n    o = document.body.appendChild(document.createElement(\"div\"));\n    o.id = \"alert-overlay\";\n    o.setAttribute(\n      \"style\",\n      \"position:fixed;inset:0;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center\"\n    );\n    o.innerHTML = `<div id=\"alert-box\" style=\"background:#fff;padding:1.5em 2em;border-radius:8px;box-shadow:0 2px 16px #0003;min-width:220px;max-height:80vh;position:relative;display:flex;flex-direction:column;\">\n      <button id=\"close-alert\" style=\"position:absolute;top:12px;right:20px;font-size:1.5em;background:none;border:none;cursor:pointer;color:black;\">&times;</button>\n      <div id=\"alert-list\" style=\"overflow:auto;flex:1;\"></div>\n    </div>`;\n\n    // Add click handlers to close overlay\n    o.addEventListener(\"click\", (e) => e.target == o && o.remove());\n    document.getElementById(\"close-alert\").onclick = () => o.remove();\n  }\n\n  list = o.querySelector(\"#alert-list\");\n\n  // Add new message to list\n  list.innerHTML += `<div style=\"border-bottom:1px solid #333; font-size:1.2em;margin:0.5em 0;\">${msg}</div>`;\n}\n\n/**\n * Sets up development tools for debugging API requests\n * Adds a keyboard shortcut (Ctrl+I) that shows a modal with request history\n * Each request entry shows:\n * - Request path\n * - Request details\n * - Response data\n * - Timestamp\n */\nexport function setupDevTools() {\n  // Keyboard shortcut (Ctrl+I) to toggle debug view\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"i\" && e.ctrlKey) {\n      // Create HTML of the grab.log requests\n      let html = \" \";\n      for (let request of grab.log) {\n        html += `<div style=\"margin-bottom:1em; border-bottom:1px solid #ccc; padding-bottom:1em;\">\n          <b>Path:</b> ${request.path}<br>\n          <b>Request:</b> ${request.request}<br>\n          <b>Response:</b> ${JSON.stringify(request.response, null, 2)}<br>\n          <b>Time:</b> ${new Date(request.lastFetchTime).toLocaleString()}\n        </div>`;\n      }\n      showAlert(html);\n    }\n  });\n}\n\n/**\n * Displays an animated spinner in the terminal with the provided text.\n * The spinner animates in-place until the returned function is called,\n * which stops the spinner and prints a success message.\n * @param {string} text - The text to display next to the spinner animation.\n * @returns {(success?: string) => void} Stop function with optional message.\n * @example\n * const stopSpinner = showSpinnerInTerminal('Downloading...');\n * setTimeout(() => {\n *    stopSpinner('Success!');\n * }, 2000);\n */\nexport function showSpinnerInTerminal(text) {\n  let i = 0,\n    interval = setInterval(() => {\n      process.stdout.write(\n        \"\\r\" + \"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\".split(\"\")[(i = ++i % 10)] + \" \" + text\n      );\n    }, 50);\n\n  return function (success = \"✔ Done!\") {\n    clearInterval(interval);\n    process.stdout.write(\"\\r\" + success + \" \".repeat(text.length) + \"\\n\");\n  };\n}\n","import { printJSONStructure, log, showAlert, setupDevTools } from \"./log\";\n\n/**\n * TODO\n *  - react tests\n *  - grab error popup and dev tool\n *  - show net log in alert\n *  - progress\n *  - pagination working\n *  - tests in stackblitz\n *  - loading icons\n *  - cache revalidation\n */\n\n/**\n * ### GRAB: Generate Request to API from Browser\n * ![GrabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * \n * **GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool**\n * 1. **One Function**: 3Kb min, 0 dependencies, minimalist syntax, [more features than top alternatives](https://grab.js.org/guide/Comparisons)\n * 2. **Auto-JSON Convert**: Pass parameters and get response or error in JSON, handling other data types as is.\n * 3. **isLoading Status**: Sets `.isLoading=true` on the pre-initialized response object so you can show a \"Loading...\" in any framework\n * 4. **Debug Logging**: Adds global `log()` and prints colored JSON structure, response, timing for requests in test.\n * 5. **Mock Server Support**: Configure `window.grab.mock` for development and testing environments\n * 6. **Cancel Duplicates**: Prevent this request if one is ongoing to same path & params, or cancel the ongoing request.\n * 7. **Timeout & Retry**: Customizable request timeout, default 30s, and auto-retry on error\n * 8. **DevTools**: `Ctrl+I` overlays webpage with devtools showing all requests and responses, timing, and JSON structure.\n * 9. **Request History**: Stores all request and response data in global `grab.log` object\n * 10. **Pagination Infinite Scroll**: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.\n * 11. **Base URL Based on Environment**: Configure `grab.defaults.baseURL` once at the top, overide with `SERVER_API_URL` in `.env`.\n * 12. **Frontend Cache**: Set cache headers and retrieve from frontend memory for repeat requests to static data.\n * 13. **Regrab On Error**: Regrab on timeout error, or on window refocus, or on network change, or on stale data.\n * 14. **Framework Agnostic**: Alternatives like TanStack work only in component initialization and depend on React & others.\n * 15. **Globals**: Adds to window in browser or global in Node.js so you only import once: `grab()`, `log()`, `grab.log`, `grab.mock`, `grab.defaults`\n * 16. **TypeScript Tooltips**: Developers can hover over option names and autocomplete TypeScript.\n * 17. **Request Stategies**: [🎯 Examples](https://grab.js.org/guide/Examples) show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etc\n * 18. **Rate Limiting**: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.\n * 19. **Repeat**: Repeat request this many times, or repeat every X seconds to poll for updates.\n * 20. **Loading Icons**: Import from `grab-api.js/icons` to get enhanced animated loading icons.\n *\n * @param {string} path The full URL path OR relative path on this server after `grab.defaults.baseURL`\n * @param {object} [options={}] Request params for GET or body for POST/PUT/PATCH and utility options\n * @param {string} [options.method] default=\"GET\" The HTTP method to use\n * @param {object} [options.response] Pre-initialized object which becomes response JSON, no need for `.data`.\n *  isLoading and error may also be set on this object. May omit and use return if load status is not needed.\n * @param {boolean} [options.cancelOngoingIfNew]  default=false Cancel previous requests to same path\n * @param {boolean} [options.cancelNewIfOngoing] default=false Cancel if a request to path is in progress\n * @param {boolean} [options.cache] default=false Whether to cache the request and from frontend cache\n * @param {boolean} [options.debug] default=false Whether to log the request and response\n * @param {number} [options.timeout] default=30 The timeout for the request in seconds\n * @param {number} [options.cacheForTime] default=60 Seconds to consider data stale and invalidate cache\n * @param {number} [options.rateLimit] default=0 If set, how many seconds to wait between requests\n * @param {string} [options.baseURL] default='/api/' base url prefix, override with SERVER_API_URL env\n * @param {boolean} [options.setDefaults] default=false Pass this with options to set\n *  those options as defaults for all requests.\n * @param {number} [options.retryAttempts] default=0 Retry failed requests this many times\n * @param {array} [options.infiniteScroll] default=null [page key, response field to concatenate, element with results]\n * @param {number} [options.repeat] default=0 Repeat request this many times\n * @param {number} [options.repeatEvery] default=null Repeat request every seconds\n * @param {function} [options.logger] default=log Custom logger to override the built-in color JSON log()\n * @param {function} [options.onRequest] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onResponse] Set with defaults to modify each request data.\n *  Takes and returns in order: path, response, params, fetchParams\n * @param {function} [options.onStream] Set with defaults to process the response as a stream (i.e., for instant unzip)\n * @param {function} [options.onError] Set with defaults to modify the error data. Takes: error, path, params\n * @param {number} [options.debounce] default=0 Seconds to debounce request, wait to execute so that other requests may override\n * @param {boolean} [options.regrabOnStale] default=false Refetch when cache is past cacheForTime\n * @param {boolean} [options.regrabOnFocus] default=false Refetch on window refocus\n * @param {boolean} [options.regrabOnNetwork] default=false Refetch on network change\n * @param {any} [...params] All other params become GET params, POST body, and other methods.\n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org)\n * @example import grab from 'grab-api.js';\n * let res = {};\n * await grab('search', {\n *   response: res,\n *   query: \"search words\"\n * })\n */\nexport default async function grab<TResponse = any, TParams = any>(path: string, options: GrabOptions<TResponse, TParams>): Promise<GrabResponse<TResponse>> {\n  let {\n    headers,\n    response = {} as any, // Pre-initialized object to set the response in. isLoading and error are also set on this object.\n    method = options.post // set post: true for POST, omit for GET\n      ? \"POST\"\n      : options.put\n        ? \"PUT\"\n        : options.patch\n          ? \"PATCH\"\n          : \"GET\",\n    cache = false, // Enable/disable frontend caching\n    cacheForTime = 60, // Seconds to consider data stale and invalidate cache\n    timeout = 30, // Request timeout in seconds\n    baseURL = (typeof process !== \"undefined\" && process.env.SERVER_API_URL) ||\n    \"/api/\", // Use env var or default to /api/\n    cancelOngoingIfNew = false, // Cancel previous request for same path\n    cancelNewIfOngoing = false, // Don't make new request if one is ongoing\n    rateLimit = 0, // Minimum seconds between requests\n    debug = false, // Auto-enable debug on localhost\n    // typeof window !== \"undefined\" && window?.location?.hostname?.includes(\"localhost\"), \n    infiniteScroll = null, // page key, response field to concatenate, element with results\n    setDefaults = false, // Set these options as defaults for future requests\n    retryAttempts = 0, // Retry failed requests once\n    logger = log, // Custom logger to override the built-in color JSON log()\n    onRequest = null, // Hook to modify request data before request is made\n    onResponse = null, // Hook to modify request data after request is made\n    onError = null, // Hook to modify request data after request is made\n    onStream = null, // Hook to process the response as a stream (i.e., for instant unarchiving)\n    repeatEvery = null, // Repeat request every seconds\n    repeat = 0, // Repeat request this many times\n    debounce = 0, // Seconds to debounce request, wait to execute so that other requests may override\n    regrabOnStale = false, // Refetch when cache is past cacheForTime\n    regrabOnFocus = false, // Refetch on window refocus\n    regrabOnNetwork = false, // Refetch on network change\n    post = false,\n    put = false,\n    patch = false,\n    body = null,\n    ...params  // All other params become request params/query\n  } = {\n    // Destructure options with defaults, merging with any globally set defaults\n    ...(typeof window !== \"undefined\" ? window?.grab?.defaults : (global||globalThis)?.grab?.defaults || {}),\n    ...options,\n  };\n\n  // Handle URL construction\n  // Ensures proper joining of baseURL and path\n  if (path.startsWith(\"http:\") || path.startsWith(\"https:\")) baseURL = \"\";\n  else if (!path.startsWith(\"/\") && !path.startsWith(\"http:\") && !baseURL.endsWith(\"/\")) path = \"/\" + path;\n\n  try {\n    //handle debounce\n    if (debounce > 0) \n      return await debouncer(async () => {\n        await grab(path, { ...options, debounce: 0 });\n      }, debounce * 1000) as GrabResponse;\n    \n\n    // Handle repeat options:\n    // - repeat: Makes the same request multiple times sequentially\n    // - repeatEvery: Makes the request periodically on an interval\n    if (repeat > 1) {\n      for (let i = 0; i < repeat; i++) {\n        await grab(path, { ...options, repeat: 0 });\n      }\n      return response;\n    }\n    if (repeatEvery) {\n      setInterval(async () => {\n        await grab(path, { ...options, repeat: 0, repeatEvery: null });\n      }, repeatEvery * 1000);\n      return response;\n    }\n\n    // Store the provided options as new defaults if setDefaults flag is set\n    // This allows configuring default options that apply to all future requests\n    if (options?.setDefaults) {\n      if (typeof window !== \"undefined\")\n        window.grab.defaults = { ...options, setDefaults: undefined };\n      else if (typeof (global || globalThis).grab !== \"undefined\")\n        (global || globalThis).grab.defaults = { ...options, setDefaults: undefined };\n\n      return;\n    }\n\n    // regrab on stale, on window refocus, on network\n    if (typeof window !== undefined) {\n      const regrab = async () =>\n        await grab(path, { ...options, cache: false });\n      if (regrabOnStale && cache)\n        setTimeout(regrab, 1000 * cacheForTime);\n      if (regrabOnNetwork)\n        window.addEventListener(\"online\", regrab);\n      if (regrabOnFocus) {\n        window.addEventListener(\"focus\", regrab);\n        document.addEventListener(\"visibilitychange\", async () => {\n          if (document.visibilityState === \"visible\")\n            await regrab()\n\n        });\n      }\n    }\n\n    // Handle response parameter which can be either an object to populate\n    // or a function to call with results (e.g. React setState)\n    let resFunction = typeof response === \"function\" ? response : null;\n    if (!response || resFunction) response = {};\n\n    var [paginateKey, paginateResult, paginateElement] = infiniteScroll || [];\n\n    // Configure infinite scroll behavior if enabled\n    // Attaches scroll listener to specified element that triggers next page load\n    if (infiniteScroll?.length && typeof window == \"undefined\") {\n      let paginateDOM =\n        typeof paginateElement === \"string\"\n          ? document.querySelector(paginateElement)\n          : paginateElement;\n\n      if (paginateDOM)\n        paginateDOM.removeEventListener(\"scroll\", (window ?? globalThis)?.scrollListener);\n\n      // Your modified scroll listener with position saving\n      (window ?? globalThis).scrollListener = paginateDOM.addEventListener(\n        \"scroll\",\n        async ({ target }: { target: EventTarget }) => {\n          // Save scroll position whenever user scrolls\n          const t = target as HTMLElement;\n\n          localStorage.setItem(\n            \"scroll\",\n            JSON.stringify([t.scrollTop, t.scrollLeft, paginateElement])\n          );\n\n          if (t.scrollHeight - t.scrollTop <= t.clientHeight + 200) {\n            await grab(path, {\n              ...options,\n              cache: false,\n              [paginateKey]: priorRequest?.currentPage + 1,\n            });\n          }\n        }\n      );\n    }\n\n    // Check request history for a previous request with same path/params\n    // Used for caching and pagination. Ignores pagination params when comparing.\n    let paramsAsText = JSON.stringify(\n      paginateKey ? { ...params, [paginateKey]: undefined } : params\n    );\n    let priorRequest = grab?.log?.find(\n      (e) => e.request == paramsAsText && e.path == path\n    );\n\n    // Handle response data management based on pagination settings\n    if (!paginateKey) {\n      // Clear any existing response data\n      for (let key of Object.keys(response)) response[key] = undefined;\n\n      // For non-paginated requests:\n      // Return cached response if caching enabled and identical request exists\n      // after returning cache, proceed with call to revalidate ensure data is up to date\n      if (\n        cache &&\n        (!cacheForTime || priorRequest?.lastFetchTime > Date.now() - 1000 * cacheForTime)\n      ) {\n        // set response to cache data\n        for (let key of Object.keys(priorRequest.res))\n          response[key] = priorRequest.res[key];\n        if (resFunction) response = resFunction(response);\n\n        // if (!cacheValidate)  return response;\n\n      }\n\n    } else {\n      // For paginated requests:\n      // Track current page number and append results to existing data\n      let pageNumber =\n        priorRequest?.currentPage + 1 || params?.[paginateKey] || 1;\n\n      // Clear response if this is a new request with new params\n      if (!priorRequest) {\n        response[paginateResult] = [];\n        pageNumber = 1;\n      }\n\n      // Update page tracking\n      if (priorRequest) priorRequest.currentPage = pageNumber;\n      // @ts-ignore\n      params[paginateKey] = pageNumber;\n    }\n\n    // Set loading state on response object\n    if (resFunction)\n      resFunction({ isLoading: true });\n    else if (typeof response === \"object\") response.isLoading = true;\n\n    if (resFunction) response = resFunction(response);\n\n    // Enforce rate limiting between requests if configured\n    if (\n      rateLimit > 0 &&\n      priorRequest?.lastFetchTime &&\n      priorRequest.lastFetchTime > Date.now() - 1000 * rateLimit\n    )\n      throw new Error(`Fetch rate limit exceeded for ${path}. \n        Wait ${rateLimit}s between requests.`);\n\n    // Handle request cancellation based on configuration:\n    // - cancelOngoingIfNew: Cancels any in-progress request for same path\n    // - cancelNewIfOngoing: Prevents new request if one is already in progress\n    if (priorRequest?.controller)\n      if (cancelOngoingIfNew) priorRequest.controller.abort();\n      else if (cancelNewIfOngoing) return { isLoading: true } as GrabResponse;\n\n    // Track new request in history log\n    if (typeof grab.log != \"undefined\")\n    grab.log?.unshift({\n      path,\n      request: paramsAsText,\n      lastFetchTime: Date.now(),\n      controller: new AbortController(),\n    });\n\n    // Configure fetch request parameters including headers, cache settings,\n    // and timeout/cancellation signals\n    let fetchParams = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...headers,\n      },\n      body: params.body,\n      redirect: \"follow\" as RequestRedirect,\n      cache: cache ? \"force-cache\" : \"no-store\" as RequestCache,\n      signal: cancelOngoingIfNew\n        ? grab.log[0]?.controller?.signal\n        : AbortSignal.timeout(timeout * 1000),\n    } as RequestInit;\n\n    // Format request parameters based on HTTP method\n    // POST/PUT/PATCH send data in request body\n    // GET/DELETE append data as URL query parameters\n    let paramsGETRequest = \"\";\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method))\n      fetchParams.body = params.body || JSON.stringify(params);\n    else paramsGETRequest = (Object.keys(params).length?\"?\":\"\") + new URLSearchParams(params).toString();\n\n    // Execute pre-request hook if configured\n    // Allows modifying request data before sending\n    if (typeof onRequest === \"function\")\n      [path, response, params, fetchParams] = onRequest(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n\n    // Process request through mock handler if configured\n    // Otherwise make actual API request\n    let res = null,\n      startTime = new Date(),\n      mockHandler = grab.mock?.[path] as GrabMockHandler;\n\n    let wait = (s) => new Promise((res) => setTimeout(res, s * 1000 || 0));\n\n    if (\n      mockHandler &&\n      (!mockHandler.params || mockHandler.method == method) &&\n      (!mockHandler.params ||\n        paramsAsText == JSON.stringify(mockHandler.params))\n    ) {\n      await wait(mockHandler.delay);\n\n      res =\n        typeof mockHandler.response === \"function\"\n          ? mockHandler.response(params)\n          : mockHandler.response;\n    } else {\n\n      // Make actual API request and handle response based on content type\n      res = await fetch(baseURL + path + paramsGETRequest, fetchParams).catch(\n        (e) => {\n          throw new Error(e);\n        }\n      );\n\n      if (!res.ok)\n        throw new Error(`HTTP error: ${res.status} ${res.statusText}`);\n\n\n      // Convert browser ReadableStream to Node.js stream\n      let type = res.headers.get(\"content-type\");\n\n      if (onStream)\n        await onStream(res.body)\n      else res = await (type\n        ? type.includes(\"application/json\")\n          ? res && res.json()\n          : type.includes(\"application/pdf\") ||\n            type.includes(\"application/octet-stream\")\n            ? res.blob()\n            : res.text()\n        : res.json()\n      ).catch((e) => {\n        throw new Error(\"Error parsing response: \" + e);\n      });\n    }\n\n    // Execute post-request hook if configured\n    // Allows modifying response data before processing\n    if (typeof onResponse === \"function\")\n      [path, response, params, fetchParams] = onResponse(\n        path,\n        response,\n        params,\n        fetchParams\n      );\n\n    // Clear request tracking states\n    if (resFunction)\n      resFunction({ isLoading: undefined });\n    else if (typeof response === \"object\") delete response?.isLoading;\n\n    delete priorRequest?.controller;\n\n    // Log debug information if enabled\n    // Includes request details, timing, and response structure\n    const elapsedTime = (\n      (Number(new Date()) - Number(startTime)) /\n      1000\n    ).toFixed(1);\n    if (debug) {\n      logger(\n        \"Path:\" +\n        baseURL +\n        path +\n        paramsGETRequest +\n        \"\\n\" +\n        JSON.stringify(options, null, 2) +\n        \"\\nTime: \" +\n        elapsedTime +\n        \"s\\nResponse: \" +\n        printJSONStructure(res)\n      );\n      // console.log(res);\n    }\n\n    if (typeof res === \"undefined\") return;\n\n    // Update response object with results\n    // For paginated requests, concatenates with existing results\n    if (typeof res === \"object\") {\n      for (let key of Object.keys(res))\n        response[key] =\n          paginateResult == key && response[key]?.length\n            ? [...response[key], ...res[key]]\n            : res[key];\n\n      if (typeof response !== \"undefined\")\n        response.data = res // for axios compat\n    } else if (resFunction) resFunction({ data: res, ...res });\n    else if (typeof response === \"object\") response.data = res;\n\n    // Store request/response in history log\n    if (typeof grab.log != \"undefined\")\n    grab.log?.unshift({\n      path,\n      request: JSON.stringify({ ...params, paginateKey: undefined }),\n      response,\n      lastFetchTime: Date.now(),\n    });\n\n    if (resFunction) response = resFunction(response);\n\n    return response;\n  } catch (error) {\n\n    // Handle any errors that occurred during request processing\n    let errorMessage =\n      \"Error: \" + error.message + \"\\nPath:\" + baseURL + path + \"\\n\";\n    JSON.stringify(params);\n\n    if (typeof onError === \"function\")\n      onError(\n        error.message,\n        baseURL + path,\n        params\n      );\n\n    // Retry request if retries are configured and attempts remain\n    if (options.retryAttempts > 0)\n      return await grab(path, {\n        ...options,\n        retryAttempts: --options.retryAttempts,\n      });\n\n    // Update error state in response object\n    // Do not show errors for duplicate aborted requests\n    if (!error.message.includes(\"signal\") && options.debug) {\n      logger(errorMessage, \"color: red;\");\n      if (debug && typeof document !== undefined) showAlert(errorMessage);\n    }\n    response.error = error.message;\n    if (typeof response === \"function\") {\n      response.data = response({ isLoading: undefined, error: error.message });\n      response = response.data\n    }\n    else delete response?.isLoading;\n\n    // Log error in request history\n    if (typeof grab.log != \"undefined\")\n      grab.log?.unshift({\n      path,\n      request: JSON.stringify(params),\n      error: error.message,\n    });\n\n    // if (typeof options.response === \"function\")\n    //   response = options.response(response);\n    return response;\n  }\n};\n\n\n/**\n * Creates a new instance of grab with default options\n * to apply to all requests made by this instance\n * @param {Object} defaults - options for all requests by instance\n * @returns {Function} grab() function using those options\n */\ngrab.instance = (defaults = {}) => (path, options = {}) =>\n  grab(path, { ...defaults, ...options });\n\n// delays execution so that future calls may override and only executes last one\nconst debouncer = async (func, wait) => {\n  let timeout;\n  return async function executedFunction(...args) {\n    const later = async () => {\n      clearTimeout(timeout);\n      await func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Add globals to window in browser, or global in Node.js\nif (typeof window !== \"undefined\") {\n  window.log = log;\n  // @ts-ignore\n  window.grab = grab\n\n  window.grab.log = [];\n  window.grab.mock = {};\n  window.grab.defaults = {};\n\n  //Ctrl+I setup dev tools\n  setupDevTools();\n\n  // Restore scroll position when page loads or component mounts\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    let [scrollTop, scrollLeft, paginateElement] =\n      JSON.parse(localStorage.getItem(\"scroll\")) || [];\n    if (!scrollTop) return;\n    document.querySelector(paginateElement).scrollTop = scrollTop;\n    document.querySelector(paginateElement).scrollLeft = scrollLeft;\n  });\n} else if (typeof global !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  global.log = log;\n  global.grab = grab.instance();\n} else if (typeof globalThis !== \"undefined\") {\n  grab.log = [];\n  grab.mock = {};\n  grab.defaults = {};\n  globalThis.log = log;\n  globalThis.grab = grab.instance();\n}\n\n/***************** TYPESCRIPT INTERFACES *****************/\n\n// Core response object that gets populated with API response data\nexport type GrabResponse<TResponse = any> = TResponse & {\n  /** Indicates if request is currently in progress */\n  isLoading?: boolean;\n  /** Error message if request failed */\n  error?: string;\n  /** Binary or text response data (JSON is set to the root)*/\n  data?: TResponse | any;\n  /** The actual response data - type depends on API endpoint */\n  [key: string]: unknown;\n}\n\n\nexport type GrabOptions<TResponse = any, TParams = any> = TParams & {\n  /** include headers and authorization in the request */\n  headers?: Record<string, string>;\n  /** Pre-initialized object which becomes response JSON, no need for .data */\n  response?: TResponse | ((params: TParams) => TResponse) | any;\n  /** default=\"GET\" The HTTP method to use */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** default=false Whether to cache the request and from frontend cache */\n  cache?: boolean;\n  /** default=60 Seconds to consider data stale and invalidate cache */\n  cacheForTime?: number;\n  /** default=30 The timeout for the request in seconds */\n  timeout?: number;\n  /** default='/api/' base url prefix, override with SERVER_API_URL env */\n  baseURL?: string;\n  /** default=true Cancel previous requests to same path */\n  cancelOngoingIfNew?: boolean;\n  /** default=false Cancel if a request to path is in progress */\n  cancelNewIfOngoing?: boolean;\n  /** default=false If set, how many seconds to wait between requests */\n  rateLimit?: number;\n  /** default=false Whether to log the request and response */\n  debug?: boolean;\n  /** default=null [page key, response field to concatenate, element with results] */\n  infiniteScroll?: [string, string, string];\n  /** default=false Pass this with options to set those options as defaults for all requests */\n  setDefaults?: boolean;\n  /** default=0 Retry failed requests this many times */\n  retryAttempts?: number;\n  /** default=log Custom logger to override the built-in color JSON log() */\n  logger?: (...args: any[]) => void;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onRequest?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams */\n  onResponse?: (...args: any[]) => any;\n  /** Set with defaults to modify each request data. Takes and returns in order: error, path, params */\n  onError?: (...args: any[]) => any;\n  /** Set with defaults to process the response as a stream (i.e., for instant unzip) */\n  onStream?: (...args: any[]) => any;\n  /** default=0 Repeat request this many times */\n  repeat?: number;\n  /** default=null Repeat request every seconds */\n  repeatEvery?: number;\n  /** default=0 Seconds to debounce request, wait to execute so that other requests may override */\n  debounce?: number;\n  /** default=false Refetch when cache is past cacheForTime */\n  regrabOnStale?: boolean;\n  /** default=false Refetch on window refocus */\n  regrabOnFocus?: boolean;\n  /** default=false Refetch on network change */\n  regrabOnNetwork?: boolean;\n  /** shortcut for method: \"POST\" */\n  post?: boolean;\n  /** shortcut for method: \"PUT\" */\n  put?: boolean;\n  /** shortcut for method: \"PATCH\" */\n  patch?: boolean;\n  /** default=null The body of the POST/PUT/PATCH request (can be passed into main)*/\n  body?: any;\n  /** All other params become GET params, POST body, and other methods */\n  [key: string]: TParams | any;\n}\n\n\n// Combined options and parameters interface\n\n// Mock server configuration for testing\nexport interface GrabMockHandler<TParams = any, TResponse = any> {\n  /** Mock response data or function that returns response */\n  response: TResponse | ((params: TParams) => TResponse);\n  /** HTTP method this mock should respond to */\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"OPTIONS\" | \"HEAD\";\n  /** Request parameters this mock should match */\n  params?: TParams;\n  /** Delay in seconds before returning mock response */\n  delay?: number;\n}\n\n// Request log entry for debugging and history\nexport interface GrabLogEntry {\n  /** API path that was requested */\n  path: string;\n  /** Stringified request parameters */\n  request: string;\n  /** Response data (only present for successful requests) */\n  response?: any;\n  /** Error message (only present for failed requests) */\n  error?: string;\n  /** Timestamp when request was made */\n  lastFetchTime: number;\n  /** Abort controller for request cancellation */\n  controller?: AbortController;\n  /** Current page number for paginated requests */\n  currentPage?: number;\n}\n\n// Global grab configuration and state\nexport interface GrabGlobal {\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n  /** Request history and debugging info */\n  log?: GrabLogEntry[];\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Main grab function signature with overloads for different use cases\nexport interface GrabFunction{\n  /**\n * ### GRAB: Generate Request to API from Browser\n * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n * Make API request with path \n * @returns {Promise<Object>} The response object with resulting data or .error if error.\n * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n */\n  <TResponse = any, TParams = Record<string, any>>(path: string): Promise<GrabResponse<TResponse>>;\n\n  /**\n   * ### GRAB: Generate Request to API from Browser\n   * ![grabAPILogo](https://i.imgur.com/qrQWkeb.png)\n   * Make API request with path and options/parameters\n   * @returns {Promise<Object>} The response object with resulting data or .error if error.\n   * @author [vtempest (2025)](https://github.com/vtempest/grab-api)\n   * @see  [🎯 Examples](https://grab.js.org/guide/Examples) [📑 Docs](https://grab.js.org/lib)\n   */\n  <TResponse = any, TParams = Record<string, any>>(\n    path: string,\n    config: GrabOptions<TResponse, TParams>\n  ): Promise<GrabResponse<TResponse>>;\n\n  /** Default options applied to all requests */\n  defaults?: Partial<GrabOptions>;\n\n  /** Request history and debugging info for all requests */\n  log?: GrabLogEntry[];\n\n  /** Mock server handlers for testing */\n  mock?: Record<string, GrabMockHandler>;\n\n  /** Create a separate instance of grab with separate default options */\n  instance?: (defaultOptions?: Partial<GrabOptions>) => GrabFunction;\n}\n\n// Log function for debugging\nexport interface LogFunction {\n  /**\n   * Log messages with custom styling\n   * @param message - Message to log (string or object)\n   * @param style - CSS style string for console output\n   * @param hideInProduction - Whether to hide in production (auto-detected if undefined)\n   */\n  (message: string | object, style?: string, hideInProduction?: boolean): void;\n}\n\n// Utility function to describe JSON structure\nexport interface printJSONStructureFunction {\n  /**\n   * Generate TypeDoc-like description of JSON object structure\n   * @param obj - The JSON object to describe\n   * @returns String representation of object structure\n   */\n  (obj: any): string;\n}\n\n\n\n// Helper type for creating typed API clients\n// export type TypedGrabFunction = <\n//   TResponse = any,\n//   TParams = Record<string, any>\n// >(\n//   path: string,\n//   config?: GrabOptions<TResponse, TParams>\n// ) => Promise<GrabResponse<TResponse>>;\n\n\n\ndeclare global {\n  // Browser globals\n  interface Window {\n    grab: GrabFunction;\n    log: LogFunction;\n  }\n\n  // Node.js globals\n  namespace NodeJS {\n    interface Global {\n      grab: GrabFunction;\n      log: LogFunction;\n    }\n  }\n\n  // Global variables available after script inclusion\n  var log: LogFunction;\n  var grab: GrabFunction;\n}\n\nexport {\n  grab, log, showAlert, printJSONStructure\n}"],"names":["log","message","options","color","style","hideInProduction","startSpinner","stopSpinner","window","location","hostname","includes","printJSONStructure","JSON","stringify","split","length","match","i","global","globalThis","interval","setInterval","process","stdout","write","clearInterval","repeat","console","debug","colors","reset","yellow","cyan","magenta","gray","green","blue","red","white","getColorForType","value","Array","isArray","getTypeString","obj","indent","pad","result","result2","forEach","item","idx","keys","Object","key","index","showAlert","msg","document","list","o","getElementById","body","appendChild","createElement","id","setAttribute","innerHTML","addEventListener","e","target","remove","onclick","querySelector","async","grab","path","headers","response","method","post","put","patch","cache","cacheForTime","timeout","baseURL","env","SERVER_API_URL","cancelOngoingIfNew","cancelNewIfOngoing","rateLimit","infiniteScroll","setDefaults","retryAttempts","logger","onRequest","onResponse","onError","onStream","repeatEvery","debounce","regrabOnStale","regrabOnFocus","regrabOnNetwork","params","_a","defaults","_c","_b","startsWith","endsWith","debouncer","regrab","setTimeout","visibilityState","resFunction","paginateKey","paginateResult","paginateElement","paginateDOM","removeEventListener","_d","scrollListener","t","localStorage","setItem","scrollTop","scrollLeft","scrollHeight","clientHeight","priorRequest","currentPage","paramsAsText","grab$1","_e","find","request","pageNumber","lastFetchTime","Date","now","res","isLoading","Error","controller","abort","_f","unshift","AbortController","fetchParams","Accept","redirect","signal","_g","_h","AbortSignal","paramsGETRequest","URLSearchParams","toString","startTime","mockHandler","mock","_i","wait","s","Promise","fetch","catch","ok","status","statusText","type","get","json","blob","text","delay","elapsedTime","Number","toFixed","_j","data","_k","error","errorMessage","_l","instance","func","args","clearTimeout","ctrlKey","html","toLocaleString","parse","getItem"],"mappings":"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"}