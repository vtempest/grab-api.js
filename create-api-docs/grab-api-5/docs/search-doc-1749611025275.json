{"searchDocs":[{"title":"modules","type":0,"sectionRef":"#","url":"/lib/modules","content":"","keywords":"","version":"Next"},{"title":"Modules​","type":1,"pageTitle":"modules","url":"/lib/modules#modules","content":" grab-apilog ","version":"Next","tagName":"h2"},{"title":"log","type":0,"sectionRef":"#","url":"/lib/log","content":"","keywords":"","version":"Next"},{"title":"log()​","type":1,"pageTitle":"log","url":"/lib/log#log","content":" function log( message: any, hideInProduction?: any, style?: string): void;   Defined in: log.ts:13  ","version":"Next","tagName":"h2"},{"title":"Colorized Log With JSON Structure​","type":1,"pageTitle":"log","url":"/lib/log#colorized-log-with-json-structure","content":"  Logs messages to the console with custom styling, prints JSON with description of structure layout, and showing debug output in development only.  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"log","url":"/lib/log#parameters","content":" Parameter\tType\tDefault value\tDescription message any undefined The message to log. If an object is provided, it will be stringified. hideInProduction? any undefined default = auto-detects based on hostname. If true, uses console.debug (hidden in production). If false, uses console.log. style? string &quot;color: blue; font-size: 12pt;&quot; default='color: blue; font-size: 15px' - CSS style string  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"log","url":"/lib/log#returns","content":" void    ","version":"Next","tagName":"h3"},{"title":"printJSONStructure()​","type":1,"pageTitle":"log","url":"/lib/log#printJSONStructure","content":" function printJSONStructure(obj: any, indent: number): string;   Defined in: log.ts:87  Creates a colored visualization of a JSON object's structure Shows the shape and types of the data rather than actual values Recursively processes nested objects and arrays  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"log","url":"/lib/log#parameters-1","content":" Parameter\tType\tDefault value obj any undefined indent number 0  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"log","url":"/lib/log#returns-1","content":" string    ","version":"Next","tagName":"h3"},{"title":"showAlert()​","type":1,"pageTitle":"log","url":"/lib/log#showalert","content":" function showAlert(msg: any): void;   Defined in: log.ts:149  Shows message in a modal overlay with scrollable message stack and is easier to dismiss unlike alert() which blocks window. Creates a semi-transparent overlay with a white box containing the message.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"log","url":"/lib/log#parameters-2","content":" Parameter\tType\tDescription msg any The message to display  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"log","url":"/lib/log#returns-2","content":" void    ","version":"Next","tagName":"h3"},{"title":"setupDevTools()​","type":1,"pageTitle":"log","url":"/lib/log#setupdevtools","content":" function setupDevTools(): void;   Defined in: log.ts:185  Sets up development tools for debugging API requests Adds a keyboard shortcut (Ctrl+I) that shows a modal with request history Each request entry shows:  Request pathRequest detailsResponse dataTimestamp  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"log","url":"/lib/log#returns-3","content":" void ","version":"Next","tagName":"h3"},{"title":"Comparisons","type":0,"sectionRef":"#","url":"/guide/Comparisons","content":"","keywords":"","version":"Next"},{"title":"Comparison of HTTP Request Libraries​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#comparison-of-http-request-libraries","content":" Feature\tGRAB\tAxios\tTanStack Query\tSWR\tAlova\tSuperAgent\tApisauce\tKySize\t✅ 3KB\t❌ 13KB\t❌ 39KB\t❌ 4.2KB\t⚠️ 4KB\t❌ 19KB\t❌ 15KB (with axios)\t⚠️ 4KB Zero Dependencies\t✅ Yes\t❌ No\t❌ No\t❌ No\t✅ Yes\t❌ No\t❌ Needs Axios\t✅ Yes isLoading State Handling\t✅ Auto-managed\t❌ Manual\t✅ Yes\t✅ Yes\t✅ Yes\t❌ Manual\t❌ Manual\t❌ Manual Auto JSON Handling\t✅ Automatic\t✅ Configurable\t❌ Manual\t❌ Manual\t✅ Automatic\t✅ Automatic\t✅ Automatic\t✅ Automatic Request Deduplication\t✅ Built-in\t❌ No\t✅ Yes\t✅ Yes\t✅ Yes\t❌ No\t❌ No\t❌ No Caching\t✅ Multi-level\t❌ No\t✅ Advanced\t✅ Advanced\t✅ Multi-level\t❌ No\t❌ No\t❌ No Mock Testing\t✅ Easy setup\t❌ Needs MSW/etc\t❌ Needs MSW/etc\t❌ Needs MSW/etc\t⚠️ Basic\t❌ Needs separate lib\t❌ Needs separate lib\t❌ Needs MSW/etc Rate Limiting\t✅ Built-in\t❌ Manual\t❌ Manual\t❌ Manual\t⚠️ Basic\t❌ Manual\t❌ Manual\t❌ Manual Automatic Retry\t✅ Configurable\t⚠️ Via interceptors\t✅ Built-in\t✅ Built-in\t✅ Built-in\t✅ Built-in\t❌ Manual\t✅ Built-in Request Cancellation\t✅ Auto + manual\t✅ Manual\t✅ Automatic\t✅ Automatic\t✅ Manual\t✅ Manual\t✅ Manual\t✅ Manual Pagination Support\t✅ Infinite scroll\t❌ Manual\t✅ Advanced\t⚠️ Basic\t✅ Built-in\t❌ Manual\t❌ Manual\t❌ Manual Interceptors\t✅ Advanced\t✅ Advanced\t⚠️ Limited\t⚠️ Limited\t✅ Advanced\t✅ Plugins\t✅ Transforms\t✅ Hooks system Debug Logging\t✅ Colored output\t⚠️ Basic\t✅ DevTools\t✅ DevTools\t⚠️ Basic\t⚠️ Basic\t⚠️ Basic\t⚠️ Basic Request History\t✅ Built-in\t❌ Manual\t✅ DevTools\t✅ DevTools\t❌ Manual\t❌ Manual\t❌ Manual\t❌ Manual Easy Syntax\t✅ Minimal\t⚠️ Medium\t❌ High\t❌ High\t⚠️ Medium\t⚠️ Medium\t✅ Low\t✅ Minimal  ","version":"Next","tagName":"h2"},{"title":"Key Strengths of GRAB​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#key-strengths-of-grab","content":" Simplicity: One function covers all use cases, with no complex setup or configuration.Lightweight: At just 3KB, it's significantly smaller than most alternatives.Instant Productivity: Works seamlessly with any framework or plain JavaScript.Testing Ready: Built-in mocking removes the need for external tools like MSW or Nock.Smart Defaults: Automatically detects localhost for debugging and handles JSON out of the box.Performance: Features like deduplication, caching, and rate limiting are built in to reduce redundant requests.  ","version":"Next","tagName":"h3"},{"title":"Migration Guide​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#migration-guide","content":" Stop trying to make fetch happen! *  Why fetch things when you can just GRAB?  Debugging requests is a bitch. Make the switch!  *Meme Reference Explanation  ","version":"Next","tagName":"h2"},{"title":"From Fetch​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#from-fetch","content":" // Fetch const response = await fetch('/api/users', { post: true, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: 'John' }) }); const user = await response.json(); // GRAB const user = await grab('users', { post: true, name: 'John' });   ","version":"Next","tagName":"h3"},{"title":"From Axios​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#from-axios","content":" // Axios axios.defaults.baseURL = 'https://api.example.com'; const response = await axios.get('/users', { params: { page: 1 } }); const users = response.data; // GRAB grab.defaults.baseURL = 'https://api.example.com'; const users = await grab('users', { page: 1 });   ","version":"Next","tagName":"h3"},{"title":"From TanStack Query​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#from-tanstack-query","content":" // TanStack Query const mutation = useMutation({ mutationFn: (newUser) =&gt; { return fetch('/api/user/create', { post: true, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(newUser) }).then(res =&gt; res.json()) }, onSuccess: () =&gt; { queryClient.invalidateQueries(['users']) } }); // GRAB const [users, setUsers] = useState({}); grab('user/create', { response: users, post: true, newUser });   ","version":"Next","tagName":"h3"},{"title":"Top 20 JavaScript Request Libraries​","type":1,"pageTitle":"Comparisons","url":"/guide/Comparisons#top-20-javascript-request-libraries","content":" vtempest/GRAB-API - Elegantly simple syntax, deduping, mock, cache, defaults.axios/axios - Promise based HTTP client for the browser and Node.jsTanStack/query - Powerful data synchronization for web applicationsvercel/swr - Data fetching library with caching, revalidation, and moresindresorhus/ky - Tiny and elegant HTTP client based on Fetch APIsindresorhus/got - Human-friendly and powerful HTTP request library for Node.jsladjs/superagent - Ajax for Node.js and browsers (feature-rich)skellock/apisauce - Axios + standardized errors + request/response transformselbywan/wretch - A tiny wrapper built around fetch with an intuitive syntaxlukeed/httpie - Ultra-lightweight Node.js HTTP clienttomas/needle - Nimble, streamable HTTP client for Node.jsnodejs/undici - An HTTP/1.1 client, written from scratch for Node.jsalovajs/alova - Request strategy library for MVVM librariesava/use-http - React hook for making isomorphic HTTP requestsunjs/ofetch - Better fetch API. Works on node, browser and workersnode-fetch/node-fetch - A light-weight module that brings window.fetch to Node.jsmikeal/bent - Functional HTTP client for Node.js w/ async/awaitbitinn/node-fetch - A light-weight module that brings window.fetch to Node.jsdevelopit/redaxios - The Axios API, as an 800 byte fetch wrapperbekacru/better-fetch - fetch with standard schema validations, pre-defined routes, callbacks, plugins ","version":"Next","tagName":"h2"},{"title":"Performance","type":0,"sectionRef":"#","url":"/guide/Performance","content":"","keywords":"","version":"Next"},{"title":"Best Practices​","type":1,"pageTitle":"Performance","url":"/guide/Performance#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Use Response Objects for UI State​","type":1,"pageTitle":"Performance","url":"/guide/Performance#1-use-response-objects-for-ui-state","content":" let userProfile = { }; await grab('users/me', { response: userProfile }); // Direct assignment is supported but loses .isLoading status let user = await grab('users/me');   ","version":"Next","tagName":"h3"},{"title":"2. Configure Defaults Early​","type":1,"pageTitle":"Performance","url":"/guide/Performance#2-configure-defaults-early","content":" grab('', { setDefaults: true, baseURL: process.env.API_URL, timeout: 30, debug: process.env.NODE_ENV === 'development' });   ","version":"Next","tagName":"h3"},{"title":"3. Use Mocks for Development​","type":1,"pageTitle":"Performance","url":"/guide/Performance#3-use-mocks-for-development","content":" if (process.env.NODE_ENV === 'development') { grab.mock = { 'users/me': { response: mockUser }, 'posts': { response: mockPosts }, 'settings': { response: mockSettings } }; }   ","version":"Next","tagName":"h3"},{"title":"4. Handle Loading States​","type":1,"pageTitle":"Performance","url":"/guide/Performance#4-handle-loading-states","content":" {state.isLoading ? ( &lt;LoadingSpinner /&gt; ) : state.error ? ( &lt;ErrorMessage error={state.error} /&gt; ) : ( &lt;DataComponent data={state.data} /&gt; )}   ","version":"Next","tagName":"h3"},{"title":"5. Use Rate Limiting for User Interactions​","type":1,"pageTitle":"Performance","url":"/guide/Performance#5-use-rate-limiting-for-user-interactions","content":" await grab('save-data', { post: true, rateLimit: 2, // 2 seconds between saves data: formData });   ","version":"Next","tagName":"h3"},{"title":"6. Development vs Production​","type":1,"pageTitle":"Performance","url":"/guide/Performance#6-development-vs-production","content":" // config.js const isDevelopment = process.env.NODE_ENV === 'development'; // Configure GRAB for different environments grab('', { setDefaults: true, baseURL: isDevelopment ? 'http://localhost:3001/api' : 'https://api.myapp.com/v1', debug: isDevelopment, timeout: isDevelopment ? 60 : 30, cache: !isDevelopment, retryAttempts: isDevelopment ? 0 : 2 });   ","version":"Next","tagName":"h3"},{"title":"Common Issues​","type":1,"pageTitle":"Performance","url":"/guide/Performance#common-issues","content":" Request not updating UI: Make sure to use the response parameter and trigger re-renders in your framework. CORS errors: Configure your server's CORS policy or use a proxy in development. Rate limiting too aggressive: Adjust the rateLimit value or disable it for testing. Mocks not working: Ensure the mock path exactly matches the request path. TypeScript errors: Add proper type definitions or use any for rapid prototyping. ","version":"Next","tagName":"h3"},{"title":"README","type":0,"sectionRef":"#","url":"/lib/","content":"","keywords":"","version":"Next"},{"title":" 📑 Docs (grab.js.org) 🎯 Example Strategies ","type":1,"pageTitle":"README","url":"/lib/##","content":" npm i grab-api.js   ","version":"Next","tagName":"h3"},{"title":"GRAB: Generate Request to API from Browser​","type":1,"pageTitle":"README","url":"/lib/#grab-generate-request-to-api-from-browser","content":" GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool  One Function: 3Kb min, 0 dependencies, minimalist syntax, more features than top alternativesAuto-JSON Convert: Pass parameters and get response or error in JSON, handling other data types as is.isLoading Status: Sets .isLoading=true on the pre-initialized response object so you can show a &quot;Loading...&quot; in any frameworkDebug Logging: Adds global log() and prints colored JSON structure, response, timing for requests in test.Mock Server Support: Configure window.grab.mock for development and testing environmentsCancel Duplicates: Prevent this request if one is ongoing to same path &amp; params, or cancel the ongoing request.Timeout &amp; Retry: Customizable request timeout, default 20s, and auto-retry on errorDevTools: Ctrl+I overlays webpage with devtools showing all requests and responses, timing, and JSON structure.Request History: Stores all request and response data in global grab.log objectPagination Infinite Scroll: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.Base URL Based on Environment: Configure grab.defaults.baseURL once at the top, overide with SERVER_API_URL in .env.Frontend Cache: Set cache headers and retrieve from frontend memory for repeat requests to static data.Regrab On Error: Regrab on timeout error, or on window refocus, or on network change, or on stale data.Framework Agnostic: Alternatives like TanStack work only in component initialization and depend on React &amp; others.Globals: Adds to window in browser or global in Node.js so you only import once: grab(), log(), grab.log, grab.mock, grab.defaultsTypeScript Tooltips: Developers can hover over option names and autocomplete TypeScript.Request Stategies: 🎯 Examples show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etcRate Limiting: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.Repeat: Repeat request this many times, or repeat every X seconds to poll for updates.Loading Icons: Import from grab-api.js/icons to get enhanced animated loading icons.  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"README","url":"/lib/#examples","content":" import grab from 'grab-api.js'; let res = $state({}) as { results: Array&lt;{title:string}&gt;, isLoading: boolean, error: string, }; await grab('search', { response: res, query: &quot;search words&quot;, post: true }) grab('user').then(log) //in svelte component {#if res.results} {res.results} {:else if res.isLoading} ... {:else if res.error} {res.error} {/if} //Setup Mock testing server, response is object or function window.grab.mock[&quot;search&quot;] = { response: (params) =&gt; { return { results: [{title:`Result about ${params.query}`}] }; }, method: &quot;POST&quot; }; //set defaults for all requests grab(&quot;&quot;, { setDefaults: true, baseURL: &quot;http://localhost:8080&quot;, timeout: 30, debug: true, rateLimit: 1, cache: true, cancelOngoingIfNew: true, }); grab.defaults.baseURL = &quot;http://localhost:8080/api/&quot;;   ","version":"Next","tagName":"h3"},{"title":"Screenshots​","type":1,"pageTitle":"README","url":"/lib/#screenshots","content":" Animated SVG Loading Icons with Customizable Colors    Set Types for Tooltips on Request &amp; Response    Debug Colorized log(JSON)    Autocomplete option names    Hover over options for info    ","version":"Next","tagName":"h3"},{"title":"Comparison of HTTP Request Libraries​","type":1,"pageTitle":"README","url":"/lib/#comparison-of-http-request-libraries","content":" Feature\tGRAB\tAxios\tTanStack Query\tSWR\tAlova\tSuperAgent\tApisauce\tKySize\t✅ 3KB\t❌ 13KB\t❌ 39KB\t❌ 4.2KB\t⚠️ 4KB\t❌ 19KB\t❌ 15KB (with axios)\t⚠️ 4KB Zero Dependencies\t✅ Yes\t❌ No\t❌ No\t❌ No\t✅ Yes\t❌ No\t❌ Needs Axios\t✅ Yes isLoading State Handling\t✅ Auto-managed\t❌ Manual\t✅ Yes\t✅ Yes\t✅ Yes\t❌ Manual\t❌ Manual\t❌ Manual Auto JSON Handling\t✅ Automatic\t✅ Configurable\t❌ Manual\t❌ Manual\t✅ Automatic\t✅ Automatic\t✅ Automatic\t✅ Automatic Request Deduplication\t✅ Built-in\t❌ No\t✅ Yes\t✅ Yes\t✅ Yes\t❌ No\t❌ No\t❌ No Caching\t✅ Multi-level\t❌ No\t✅ Advanced\t✅ Advanced\t✅ Multi-level\t❌ No\t❌ No\t❌ No Mock Testing\t✅ Easy setup\t❌ Needs MSW/etc\t❌ Needs MSW/etc\t❌ Needs MSW/etc\t⚠️ Basic\t❌ Needs separate lib\t❌ Needs separate lib\t❌ Needs MSW/etc Rate Limiting\t✅ Built-in\t❌ Manual\t❌ Manual\t❌ Manual\t⚠️ Basic\t❌ Manual\t❌ Manual\t❌ Manual Automatic Retry\t✅ Configurable\t⚠️ Via interceptors\t✅ Built-in\t✅ Built-in\t✅ Built-in\t✅ Built-in\t❌ Manual\t✅ Built-in Request Cancellation\t✅ Auto + manual\t✅ Manual\t✅ Automatic\t✅ Automatic\t✅ Manual\t✅ Manual\t✅ Manual\t✅ Manual Pagination Support\t✅ Infinite scroll\t❌ Manual\t✅ Advanced\t⚠️ Basic\t✅ Built-in\t❌ Manual\t❌ Manual\t❌ Manual Interceptors\t✅ Advanced\t✅ Advanced\t⚠️ Limited\t⚠️ Limited\t✅ Advanced\t✅ Plugins\t✅ Transforms\t✅ Hooks system Debug Logging\t✅ Colored output\t⚠️ Basic\t✅ DevTools\t✅ DevTools\t⚠️ Basic\t⚠️ Basic\t⚠️ Basic\t⚠️ Basic Request History\t✅ Built-in\t❌ Manual\t✅ DevTools\t✅ DevTools\t❌ Manual\t❌ Manual\t❌ Manual\t❌ Manual Easy Syntax\t✅ Minimal\t⚠️ Medium\t❌ High\t❌ High\t⚠️ Medium\t⚠️ Medium\t✅ Low\t✅ Minimal  Stop trying to make fetch happen! *  Why fetch things when you can just GRAB?  Debugging requests is a bitch. Make the switch! ","version":"Next","tagName":"h3"},{"title":"grab-api","type":0,"sectionRef":"#","url":"/lib/grab-api","content":"","keywords":"","version":"Next"},{"title":"GrabMockHandler<TParams, TResponse>​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grabmockhandlertparams-tresponse","content":" Defined in: grab-api.ts:656  Combined options and parameters interface Mock server configuration for testing  ","version":"Next","tagName":"h2"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters","content":" Type Parameter\tDefault type TParams any TResponse any  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#properties","content":" Property\tType\tDescription\tDefined in response TResponse | (params: TParams) =&gt; TResponse Mock response data or function that returns response grab-api.ts:658 method? &quot;GET&quot; | &quot;POST&quot; | &quot;PUT&quot; | &quot;PATCH&quot; | &quot;DELETE&quot; | &quot;OPTIONS&quot; | &quot;HEAD&quot; HTTP method this mock should respond to grab-api.ts:660 params? TParams Request parameters this mock should match grab-api.ts:662 delay? number Delay in seconds before returning mock response grab-api.ts:664    ","version":"Next","tagName":"h3"},{"title":"GrabLogEntry​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grablogentry","content":" Defined in: grab-api.ts:668  Request log entry for debugging and history  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#properties-1","content":" Property\tType\tDescription\tDefined in path string API path that was requested grab-api.ts:670 request string Stringified request parameters grab-api.ts:672 response? any Response data (only present for successful requests) grab-api.ts:674 error? string Error message (only present for failed requests) grab-api.ts:676 lastFetchTime number Timestamp when request was made grab-api.ts:678 controller? AbortController Abort controller for request cancellation grab-api.ts:680 currentPage? number Current page number for paginated requests grab-api.ts:682    ","version":"Next","tagName":"h3"},{"title":"GrabGlobal​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grabglobal","content":" Defined in: grab-api.ts:686  Global grab configuration and state  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#properties-2","content":" Property\tType\tDescription\tDefined in defaults? Partial&lt;GrabOptions&gt; Default options applied to all requests grab-api.ts:688 log? GrabLogEntry[] Request history and debugging info grab-api.ts:690 mock? Record&lt;string, GrabMockHandler&gt; Mock server handlers for testing grab-api.ts:692 instance? (defaultOptions?: Partial&lt;GrabOptions&gt;) =&gt; GrabFunction Create a separate instance of grab with separate default options grab-api.ts:694    ","version":"Next","tagName":"h3"},{"title":"GrabFunction()​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grabfunction","content":" Defined in: grab-api.ts:698  Main grab function signature with overloads for different use cases  ","version":"Next","tagName":"h2"},{"title":"Call Signature​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#call-signature","content":" GrabFunction&lt;TResponse&gt;(path: string): Promise&lt;GrabResponse&lt;TResponse&gt;&gt;;   Defined in: grab-api.ts:707  Main grab function signature with overloads for different use cases  Type Parameters​  Type Parameter\tDefault type TResponse any  Parameters​  Parameter\tType path string  Returns​  Promise&lt;GrabResponse&lt;TResponse&gt;&gt;  The response object with resulting data or .error if error.  Author​  vtempest (2025)  See​  🎯 Examples 📑 Docs  ","version":"Next","tagName":"h3"},{"title":"Call Signature​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#call-signature-1","content":" GrabFunction&lt;TResponse, TParams&gt;(path: string, config: GrabOptions&lt;TResponse, TParams&gt;): Promise&lt;GrabResponse&lt;TResponse&gt;&gt;;   Defined in: grab-api.ts:717  Main grab function signature with overloads for different use cases  Type Parameters​  Type Parameter\tDefault type TResponse any TParams Record&lt;string, any&gt;  Parameters​  Parameter\tType path string config GrabOptions&lt;TResponse, TParams&gt;  Returns​  Promise&lt;GrabResponse&lt;TResponse&gt;&gt;  The response object with resulting data or .error if error.  Author​  vtempest (2025)  See​  🎯 Examples 📑 Docs  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#properties-3","content":" Property\tType\tDescription\tDefined in defaults? Partial&lt;GrabOptions&gt; Default options applied to all requests grab-api.ts:723 log? GrabLogEntry[] Request history and debugging info for all requests grab-api.ts:726 mock? Record&lt;string, GrabMockHandler&gt; Mock server handlers for testing grab-api.ts:729 instance? (defaultOptions?: Partial&lt;GrabOptions&gt;) =&gt; GrabFunction Create a separate instance of grab with separate default options grab-api.ts:732    ","version":"Next","tagName":"h3"},{"title":"LogFunction()​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#logfunction","content":" Defined in: grab-api.ts:736  Log function for debugging  LogFunction( message: string | object, hideInProduction?: boolean, style?: string): void;   Defined in: grab-api.ts:743  Log function for debugging  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#parameters-2","content":" Parameter\tType\tDescription message string | object Message to log (string or object) hideInProduction? boolean Whether to hide in production (auto-detected if undefined) style? string CSS style string for console output  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#returns-2","content":" void    ","version":"Next","tagName":"h3"},{"title":"printJSONStructureFunction()​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#printJSONStructurefunction","content":" Defined in: grab-api.ts:747  Utility function to describe JSON structure  printJSONStructureFunction(obj: any): string;   Defined in: grab-api.ts:753  Utility function to describe JSON structure  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#parameters-3","content":" Parameter\tType\tDescription obj any The JSON object to describe  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#returns-3","content":" string  String representation of object structure    ","version":"Next","tagName":"h3"},{"title":"GrabResponse<TResponse>​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grabresponsetresponse","content":" type GrabResponse&lt;TResponse&gt; = TResponse &amp; object;   Defined in: grab-api.ts:577  Core response object that gets populated with API response data  ","version":"Next","tagName":"h2"},{"title":"Type declaration​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-declaration","content":" Name\tType\tDescription\tDefined in isLoading? boolean Indicates if request is currently in progress grab-api.ts:579 error? string Error message if request failed grab-api.ts:581 data? TResponse Binary or text response data (JSON is set to the root) grab-api.ts:583  ","version":"Next","tagName":"h3"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters-3","content":" Type Parameter\tDefault type TResponse any    ","version":"Next","tagName":"h3"},{"title":"GrabOptions<TResponse, TParams>​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#graboptionstresponse-tparams","content":" type GrabOptions&lt;TResponse, TParams&gt; = TParams &amp; object;   Defined in: grab-api.ts:589  ","version":"Next","tagName":"h2"},{"title":"Type declaration​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-declaration-1","content":" Name\tType\tDescription\tDefined in headers? Record&lt;string, string&gt; include headers and authorization in the request grab-api.ts:591 response? TResponse | (params: TParams) =&gt; TResponse | any Pre-initialized object which becomes response JSON, no need for .data grab-api.ts:593 method? &quot;GET&quot; | &quot;POST&quot; | &quot;PUT&quot; | &quot;PATCH&quot; | &quot;DELETE&quot; | &quot;OPTIONS&quot; | &quot;HEAD&quot; default=&quot;GET&quot; The HTTP method to use grab-api.ts:595 cache? boolean default=false Whether to cache the request and from frontend cache grab-api.ts:597 cacheForTime? number default=60 Seconds to consider data stale and invalidate cache grab-api.ts:599 timeout? number default=30 The timeout for the request in seconds grab-api.ts:601 baseURL? string default='/api/' base url prefix, override with SERVER_API_URL env grab-api.ts:603 cancelOngoingIfNew? boolean default=true Cancel previous requests to same path grab-api.ts:605 cancelNewIfOngoing? boolean default=false Cancel if a request to path is in progress grab-api.ts:607 rateLimit? number default=false If set, how many seconds to wait between requests grab-api.ts:609 debug? boolean default=false Whether to log the request and response grab-api.ts:611 infiniteScroll? [string, string, string] default=null [page key, response field to concatenate, element with results] grab-api.ts:613 setDefaults? boolean default=false Pass this with options to set those options as defaults for all requests grab-api.ts:615 retryAttempts? number default=0 Retry failed requests this many times grab-api.ts:617 logger()? (...args: any[]) =&gt; void default=log Custom logger to override the built-in color JSON log() grab-api.ts:619 onRequest()? (...args: any[]) =&gt; any Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams grab-api.ts:621 onResponse()? (...args: any[]) =&gt; any Set with defaults to modify each request data. Takes and returns in order: path, response, params, fetchParams grab-api.ts:623 onError()? (...args: any[]) =&gt; any Set with defaults to modify each request data. Takes and returns in order: error, path, params grab-api.ts:625 onStream()? (...args: any[]) =&gt; any Set with defaults to process the response as a stream (i.e., for instant unzip) grab-api.ts:627 repeat? number default=0 Repeat request this many times grab-api.ts:629 repeatEvery? number default=null Repeat request every seconds grab-api.ts:631 debounce? number default=0 Seconds to debounce request, wait to execute so that other requests may override grab-api.ts:633 regrabOnStale? boolean default=false Refetch when cache is past cacheForTime grab-api.ts:635 regrabOnFocus? boolean default=false Refetch on window refocus grab-api.ts:637 regrabOnNetwork? boolean default=false Refetch on network change grab-api.ts:639 post? boolean shortcut for method: &quot;POST&quot; grab-api.ts:641 put? boolean shortcut for method: &quot;PUT&quot; grab-api.ts:643 patch? boolean shortcut for method: &quot;PATCH&quot; grab-api.ts:645 body? any default=null The body of the POST/PUT/PATCH request (can be passed into main) grab-api.ts:647  ","version":"Next","tagName":"h3"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters-4","content":" Type Parameter\tDefault type TResponse any TParams any    ","version":"Next","tagName":"h3"},{"title":"GrabResponseWithData<T>​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grabresponsewithdatat","content":" type GrabResponseWithData&lt;T&gt; = GrabResponse&lt;T&gt; &amp; object;   Defined in: grab-api.ts:758  Type helpers for common use cases  ","version":"Next","tagName":"h2"},{"title":"Type declaration​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-declaration-2","content":" Name\tType\tDefined in data? T grab-api.ts:759  ","version":"Next","tagName":"h3"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters-5","content":" Type Parameter T    ","version":"Next","tagName":"h3"},{"title":"TypedGrabFunction()​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#typedgrabfunction","content":" type TypedGrabFunction = &lt;TResponse, TParams&gt;(path: string, config?: GrabOptions&lt;TResponse, TParams&gt;) =&gt; Promise&lt;GrabResponse&lt;TResponse&gt;&gt;;   Defined in: grab-api.ts:764  Helper type for creating typed API clients  ","version":"Next","tagName":"h2"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters-6","content":" Type Parameter\tDefault type TResponse any TParams Record&lt;string, any&gt;  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#parameters-4","content":" Parameter\tType path string config? GrabOptions&lt;TResponse, TParams&gt;  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#returns-4","content":" Promise&lt;GrabResponse&lt;TResponse&gt;&gt;    ","version":"Next","tagName":"h3"},{"title":"grab()​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grab","content":" function grab&lt;TResponse, TParams&gt;(path: string, options?: GrabOptions&lt;TResponse, TParams&gt;): Promise&lt;GrabResponse&lt;TResponse&gt;&gt;;   Defined in: grab-api.ts:84  ","version":"Next","tagName":"h2"},{"title":"GRAB: Generate Request to API from Browser​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#grab-generate-request-to-api-from-browser","content":" GRAB is the FBEST Request Manager: Functionally Brilliant, Elegantly Simple Tool  One Function: 3Kb min, 0 dependencies, minimalist syntax, more features than top alternativesAuto-JSON Convert: Pass parameters and get response or error in JSON, handling other data types as is.isLoading Status: Sets .isLoading=true on the pre-initialized response object so you can show a &quot;Loading...&quot; in any frameworkDebug Logging: Adds global log() and prints colored JSON structure, response, timing for requests in test.Mock Server Support: Configure window.grab.mock for development and testing environmentsCancel Duplicates: Prevent this request if one is ongoing to same path &amp; params, or cancel the ongoing request.Timeout &amp; Retry: Customizable request timeout, default 30s, and auto-retry on errorDevTools: Ctrl+I overlays webpage with devtools showing all requests and responses, timing, and JSON structure.Request History: Stores all request and response data in global grab.log objectPagination Infinite Scroll: Built-in pagination for infinite scroll to auto-load and merge next result page, with scroll position recovery.Base URL Based on Environment: Configure grab.defaults.baseURL once at the top, overide with SERVER_API_URL in .env.Frontend Cache: Set cache headers and retrieve from frontend memory for repeat requests to static data.Regrab On Error: Regrab on timeout error, or on window refocus, or on network change, or on stale data.Framework Agnostic: Alternatives like TanStack work only in component initialization and depend on React &amp; others.Globals: Adds to window in browser or global in Node.js so you only import once: grab(), log(), grab.log, grab.mock, grab.defaultsTypeScript Tooltips: Developers can hover over option names and autocomplete TypeScript.Request Stategies: 🎯 Examples show common stategies like debounce, repeat, proxy, unit tests, interceptors, file upload, etcRate Limiting: Built-in rate limiting to prevent multi-click cascading responses, require to wait seconds between requests.Repeat: Repeat request this many times, or repeat every X seconds to poll for updates.Loading Icons: Import from grab-api.js/icons to get enhanced animated loading icons.  ","version":"Next","tagName":"h3"},{"title":"Type Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#type-parameters-7","content":" Type Parameter TResponse TParams  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#parameters-5","content":" Parameter\tType\tDescription path string The full URL path OR relative path on this server after grab.defaults.baseURL options? GrabOptions&lt;TResponse, TParams&gt; Request params for GET or body for POST/PUT/PATCH and utility options  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#returns-5","content":" Promise&lt;GrabResponse&lt;TResponse&gt;&gt;  The response object with resulting data or .error if error.  ","version":"Next","tagName":"h3"},{"title":"Author​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#author-2","content":" vtempest (2025)  ","version":"Next","tagName":"h3"},{"title":"See​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#see-2","content":" 🎯 Examples 📑 Docs  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#example","content":" import grab from 'grab-api.js'; let res = {}; await grab('search', { response: res, query: &quot;search words&quot; })     ","version":"Next","tagName":"h3"},{"title":"default​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#default","content":" Renames and re-exports grab    ","version":"Next","tagName":"h2"},{"title":"log​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#log","content":" Re-exports log    ","version":"Next","tagName":"h2"},{"title":"showAlert​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#showalert","content":" Re-exports showAlert    ","version":"Next","tagName":"h2"},{"title":"printJSONStructure​","type":1,"pageTitle":"grab-api","url":"/lib/grab-api#printJSONStructure","content":" Re-exports printJSONStructure ","version":"Next","tagName":"h2"},{"title":"Request Stategies","type":0,"sectionRef":"#","url":"/guide/Examples","content":"","keywords":"","version":"Next"},{"title":"Install & Import​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#install--import","content":" npm install grab-api.js   bun i grab-api.js   import grab from &quot;grab-api.js&quot;;   ","version":"Next","tagName":"h3"},{"title":"Basic Request​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#basic-request","content":" // Basic GET request grab(&quot;user&quot;).then(log); // { id: 123, name: &quot;John Doe&quot;, ... } // GET with query parameters const searchResults = await grab(&quot;search&quot;, { query: &quot;javascript&quot;, page: 1, limit: 10, }); // POST with body await grab(&quot;users&quot;, { post: true, //shorthand for method: &quot;POST&quot; email: &quot;jane@example.com&quot;, age: 25, });   ","version":"Next","tagName":"h3"},{"title":"Reactive Loading Status​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#reactive-loading-status","content":" ReactSvelteVue 3 import React, { useState } from &quot;react&quot;; import grab from &quot;grab-api.js&quot;; function UserProfile() { const [userState, setUserState] = useState&lt;Partial&lt;{ name: string; email: string; isLoading: boolean; error: string; }&gt;&gt;({}) await grab(`user`, { response: setUserState }); return ( &lt;div&gt; {userState.isLoading &amp;&amp; &lt;div&gt;Loading...&lt;/div&gt;} {userState.error &amp;&amp; &lt;div&gt;Error: {userState.error}&lt;/div&gt;} {userState &amp;&amp; ( &lt;div&gt; &lt;h2&gt;{userState.name}&lt;/h2&gt; &lt;p&gt;{userState.email}&lt;/p&gt; &lt;/div&gt; )} &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Global Defaults Configuration​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#global-defaults-configuration","content":" // set directly grab.defaults.baseURL = &quot;https://api.myapp.com/v1&quot;; grab.defaults.headers = { Authorization: &quot;Bearer your-token-here&quot;, }; // method 2: Set defaults for all requests grab(&quot;&quot;, { setDefaults: true, baseURL: &quot;https://api.myapp.com/v1&quot;, timeout: 30, // 30 seconds debug: true, rateLimit: 1, // 1 second between requests cache: false, cancelOngoingIfNew: true, headers: { Authorization: &quot;Bearer your-token-here&quot;, }, });   ","version":"Next","tagName":"h3"},{"title":"Instance with Separate Defaults​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#instance-with-separate-defaults","content":" // separate defaults, headers, and interceptors for a third-party API const grabGoogleAPI = grab.instance({ headers: { Authorization: &quot;Bearer 9e9wjeffkwf0sf&quot; }, baseURL: &quot;https://api.google.com/v1/&quot;, debug: true, }); const data = await grabGoogleAPI(&quot;/api/endpoint&quot;); // Options Order of Precedence: Request Call &gt; Instance &gt; User Globals &gt; Package Defaults   ","version":"Next","tagName":"h3"},{"title":"TypeScript ToolTips & Error Check on Request & Response​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#typescript-tooltips--error-check-on-request--response","content":" type User = { /** Name of the user */ name: string; /** Age of the user */ age: number; }; type RequestParams = { /** Query String to search for */ q : string; /** Category of search */ category?: &quot;news&quot; | &quot;general&quot;; }; const result = await grab&lt;User, RequestParams&gt;('test-path', { q: &quot; react&quot;, category: &quot;general&quot; }); log(result.name) // instant error highlight and description tooltips over &quot;category&quot; and &quot;name&quot;   ","version":"Next","tagName":"h3"},{"title":"Pagination with Infinite Scroll​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#pagination-with-infinite-scroll","content":" let productList = $state({}) as { products: Array&lt;{name:string}&gt;, isLoading: boolean } await grab(&quot;products&quot;, { response: productList, infiniteScroll: [&quot;page&quot;, &quot;products&quot;, &quot;.results-container&quot;] }); &lt;div class=&quot;results-container&quot;&gt; {productList.products.map(product =&gt; ( &lt;div className=&quot;product-item&quot;&gt; &lt;h3&gt;{product.name}&lt;/h3&gt; &lt;/div&gt; ))} {productList.isLoading &amp;&amp; &lt;div className=&quot;loading&quot;&gt;Loading more products...&lt;/div&gt;} &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Debounced Search​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#debounced-search","content":" // Utility function for debouncing function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () =&gt; { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } // Debounced search implementation const debouncedSearch = debounce(async (query) =&gt; { if (query.length &lt; 2) return; await grab(&quot;search&quot;, { response: searchResults, query: query, cancelOngoingIfNew: true, // Cancel previous searches }); }, 300); // Wait 300ms after user stops typing // Usage in input handler function handleSearchInput(event) { debouncedSearch(event.target.value); }   ","version":"Next","tagName":"h3"},{"title":"Client Cache in User Memory​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#client-cache-in-user-memory","content":" // Enable caching for static data const categories = await grab(&quot;categories&quot;, { cache: true, }); const categoriesAgain = await grab(&quot;categories&quot;, { cache: true, }); // Instant response from frontend cache, no server call   ","version":"Next","tagName":"h3"},{"title":"Rate Limiting​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#rate-limiting","content":" // Prevent user's multi-click cascading requests let searchResults = {}; async function searchWithRateLimit(query) { await grab(&quot;search&quot;, { response: searchResults, query: query, rateLimit: 2, // Wait 2 seconds between requests }); } searchWithRateLimit(&quot;python&quot;); // Executes immediately searchWithRateLimit(&quot;golang&quot;); // fails, needs to wait   ","version":"Next","tagName":"h3"},{"title":"Duplicate Cancellation​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#duplicate-cancellation","content":" let currentSearch = {}; async function searchProducts(query) { // Cancel previous search when new one starts await grab(&quot;products/search&quot;, { response: currentSearch, query: query, cancelOngoingIfNew: true, // Default behavior }); } // Prevent new requests if one is ongoing async function preventDuplicateRequests(userId) { await grab(`users/${userId}`, { cancelNewIfOngoing: true, // Prevents duplicate requests }); }   ","version":"Next","tagName":"h3"},{"title":"Error Handling and Retry​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#error-handling-and-retry","content":" let apiData = {}; // Automatic retry on failure await grab(&quot;unreliable-endpoint&quot;, { response: apiData, retryAttempts: 3, // Retry 3 times on failure timeout: 10, // 10 second timeout }); // Manual error handling try { const result = await grab(&quot;api/data&quot;); console.log(&quot;Success:&quot;, result); } catch (error) { if (error.message.includes(&quot;timeout&quot;)) { console.log(&quot;Request timed out&quot;); } else if (error.message.includes(&quot;rate limit&quot;)) { console.log(&quot;Too many requests&quot;); } else { console.log(&quot;Other error:&quot;, error.message); } }   ","version":"Next","tagName":"h3"},{"title":"Request Hooks and Interceptors​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#request-hooks-and-interceptors","content":" // Global request interceptor grab.defaults.onRequest = (path, response, params, fetchParams) =&gt; { // Add authentication header fetchParams.headers.Authorization = `Bearer ervv0sf9vs0v0sv`; // Modify request data if (params.userId) { params.user_id = '2525'; } return [path, response, params, fetchParams]; };   ","version":"Next","tagName":"h3"},{"title":"Proxy​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#proxy","content":" //polyfill fetch with node-fetch import fetch, { Headers, Request, Response } from 'node-fetch'; if (!globalThis.fetch) { globalThis.fetch = fetch; globalThis.Headers = Headers; globalThis.Request = Request; globalThis.Response = Response; } //get proxy import { HttpsProxyAgent } from &quot;https-proxy-agent&quot;; const agent = new HttpsProxyAgent(&quot;http://username:password@proxyhost:port&quot;); let res = await grab(&quot;/path&quot;, { agent });   ","version":"Next","tagName":"h3"},{"title":"File Upload​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#file-upload","content":" const formData = new FormData(); formData.append(&quot;file&quot;, file); const response = await grab(&quot;/api/upload&quot;, { post: true, body: formData, headers: { Authorization: `Bearer ${getAuthToken()}`, }, }); // Alternative: Convert file to base64 for JSON API async function uploadFileAsJSON(file) { const base64 = await fileToBase64(file); return await grab(&quot;files/upload&quot;, { post: true, filename: file.name, content: base64, mimeType: file.type, }); } function fileToBase64(file) { return new Promise((resolve, reject) =&gt; { const reader = new FileReader(); reader.readAsDataURL(file); reader.onload = () =&gt; resolve(reader.result.split(&quot;,&quot;)[1]); reader.onerror = (error) =&gt; reject(error); }); }   ","version":"Next","tagName":"h3"},{"title":"Mock Server for Testing​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#mock-server-for-testing","content":" // Setup mock responses for testing grab.mock.users = { response: [ { id: 1, name: &quot;John Doe&quot;, email: &quot;john@example.com&quot; }, { id: 2, name: &quot;Jane Smith&quot;, email: &quot;jane@example.com&quot; }, ], delay: 1, // 1 second delay to simulate network }; grab.mock[&quot;products/search&quot;] = { response: (params) =&gt; ({ results: [ { id: 1, name: `Product matching &quot;${params.query}&quot;`, price: 29.99 }, { id: 2, name: `Another product for &quot;${params.query}&quot;`, price: 19.99 }, ], total: 2, }), post: true, delay: 0.5, }; // Now your API calls will use mock data const users = await grab(&quot;users&quot;); // Returns mock user data // Mock with conditional responses grab.mock[&quot;auth/login&quot;] = { response: (params) =&gt; { if ( params.email === &quot;admin@example.com&quot; &amp;&amp; params.password === &quot;admin123&quot; ) { return { success: true, token: &quot;mock-jwt-token-12345&quot;, user: { id: 1, name: &quot;Admin User&quot;, role: &quot;admin&quot; }, }; } else { return { success: false, error: &quot;Invalid credentials&quot;, }; } }, post: true, delay: 1, }; // Error simulation grab.mock[&quot;users/create&quot;] = { response: (params) =&gt; { if (!params.email) { throw new Error(&quot;Email is required&quot;); } return { id: Date.now(), ...params, created: true }; }, post: true, };   ","version":"Next","tagName":"h3"},{"title":"Unit Tests with Jest​","type":1,"pageTitle":"Request Stategies","url":"/guide/Examples#unit-tests-with-jest","content":" // setup-tests.js import grab from &quot;grab-api.js&quot;; // Setup global mocks for testing beforeEach(() =&gt; { // Clear previous mocks grab.mock = {}; grab.log = []; }); // user.test.js import grab from &quot;grab-api.js&quot;; describe(&quot;User API&quot;, () =&gt; { test(&quot;should fetch user data&quot;, async () =&gt; { // Setup mock grab.mock.users = { response: { id: 1, name: &quot;Test User&quot;, email: &quot;test@example.com&quot; }, }; const result = await grab(&quot;users&quot;); expect(result.id).toBe(1); expect(result.name).toBe(&quot;Test User&quot;); }); test(&quot;should handle user creation&quot;, async () =&gt; { grab.mock.users = { response: (params) =&gt; ({ id: 123, ...params, created: true, }), post: true, }; const newUser = await grab(&quot;users&quot;, { post: true, name: &quot;John Doe&quot;, email: &quot;john@example.com&quot;, }); expect(newUser.name).toBe(&quot;John Doe&quot;); expect(newUser.created).toBe(true); }); test(&quot;should handle errors&quot;, async () =&gt; { grab.mock.users = { response: () =&gt; { throw new Error(&quot;User not found&quot;); }, }; const result = await grab(&quot;users&quot;); expect(result.error).toBe(&quot;User not found&quot;); }); });  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}